@using Koncierge.Core.K8s
@using Koncierge.Core.K8s.Contexts
@using Koncierge.Core.K8s.Mappers
@using Koncierge.Core.K8s.Namespaces
@using Koncierge.Data.Repositories.Interfaces
@using Koncierge.Domain.DTOs
@using Koncierge.Domain.DTOs.Models
@using Koncierge.Domain.Entities
@using Koncierge.Ui.Components.Layout.Selects
@using Koncierge.Ui.Components.Layout.Stepper.CreateForwardSelectors

@inject IKonciergeKubeConfigService _kcService;
@inject IKubeConfigRepository _kcRepository;
@inject IKonciergeContextService _ctx
@inject IKubernetesClientManager _kcm
@inject IDialogService _dialogs

<MudDialog>
    <TitleContent>
        Add Forward
    </TitleContent>
 <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="_createFwd">
            <MudStepper ShowResetButton OnPreviewInteraction="OnPreviewInteraction">
                <MudStep Title="Cluster" HasError="@(!isClusterStep1Complete())">
            
                    
                    <ConfigAndContextSelector OnSelectionChange="OnConfigOrContextChange" />

            
            </MudStep>
        <MudStep Title="Namespace">

                    <NameSpaceSelect selectedNs="_createFwd.Namespace" _kc="_kc" OnNameSpaceSelection="OnNameSpaceChange" />



        </MudStep>
                <MudStep Title="Target">

                    <PodOrServiceSelector selectedNs="_createFwd.Namespace" _kc="_kc" OnServiceSelection="OnServiceChange" OnPodSelection="OnPodChange" OnPortSelection="OnPortsChange" />

                </MudStep>
                <MudStep Title="Additional Config" Skippable="true" SecondaryText="Optional">Create an ad content</MudStep>
    </MudStepper>
    </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </DialogActions>

    </MudDialog>
@code {

    private CreateForwardDto _createFwd { get; set; } = new();

    private KonciergeClient _kc { get; set; }



    bool success;
    string[] errors = { };
    MudForm form;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() {

        var xxx = _createFwd.KubeConfig;

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();


    protected override async Task OnInitializedAsync()
    {




    }


    private async Task OnConfigOrContextChange((KonciergeKubeConfigDto kubeConfig, KonciergeContextDto context) data)
    {
        _createFwd.KubeConfig = data.kubeConfig;


        _createFwd.Context = data.context;
        _createFwd.Namespace = new KonciergeNamespaceDto { Name = data.context.DefaultNamespace };


        _kc = await _kcm.GetClient(_createFwd.KubeConfig.Id, _createFwd.Context.Name);


        

        await Task.FromResult(Task.CompletedTask);
    }

    private void OnNameSpaceChange(KonciergeNamespaceDto ns)
    {
        _createFwd.Namespace = ns;
    }

    private void OnPodChange(KonciergePodDto pod)
    {
        _createFwd.Pod = pod;
        _createFwd.Service = null;

    }

    private void OnServiceChange(KonciergeServiceDto svc)
    {
        _createFwd.Service = svc;
        _createFwd.Pod = null;

    }

    private void OnPortsChange(List<KonciergePortDto> ports)
    {
        _createFwd.ToForward = ports;

    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }


    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if (!isClusterStep1Complete())
                {
                    await _dialogs.ShowMessageBox("Error", "Plese, select A KubeConfig and a Cluster");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if (!isNamespaceStep2Complete())
                {
                    await _dialogs.ShowMessageBox("Error", "You must select a namespace");
                    arg.Cancel = true;
                }
                break;

        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (!isClusterStep1Complete())
                {
                    await _dialogs.ShowMessageBox("Error", "Finish step 1 first");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (!isNamespaceStep2Complete())
                {
                    await _dialogs.ShowMessageBox("Error", "Finish step 2 first");
                    arg.Cancel = true;
                }
                break;

        }
    }


    private bool isClusterStep1Complete() => (_createFwd.KubeConfig is not null && _createFwd.Context is not null);
    private bool isNamespaceStep2Complete() => (_createFwd.Namespace is not null);

    
}
