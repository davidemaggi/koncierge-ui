@using Koncierge.Core.K8s.Contexts
@using Koncierge.Core.K8s.Mappers
@using Koncierge.Core.K8s.Namespaces
@using Koncierge.Data.Repositories.Interfaces
@using Koncierge.Domain.DTOs
@using Koncierge.Domain.DTOs.Models
@using Koncierge.Domain.Entities
@inject IKonciergeKubeConfigService _kcService;
@inject IKubeConfigRepository _kcRepository;
@inject IKonciergeContextService _ctx
@inject IDialogService _dialogs

<MudDialog>
    <TitleContent>
        Add Forward
    </TitleContent>
 <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="_creeteFwd">
            <MudStepper ShowResetButton OnPreviewInteraction="OnPreviewInteraction">
                <MudStep Title="Cluster" HasError="@(!isClusterStep1Complete())">
            <MudSelect T="KonciergeKubeConfigDto" Label="Configs" MultiSelection="false" ValueChanged="KubeConfigChanged">

                @foreach (var cfg in _configs)
                {
                        <MudSelectItem T="KonciergeKubeConfigDto" Value="@cfg">@(cfg.Name ?? cfg.Path)</MudSelectItem>
                }
            </MudSelect>

                

                    <MudSelect T="string" Label="Contexts" MultiSelection="false" @bind-Value="_creeteFwd.Namespace">
                    @if (selectedConfig != null)

                    {
                        @foreach (var ctx in _contexts)
                        {
                            <MudSelectItem T="string" Value="@ctx">@ctx</MudSelectItem>
                        }
                    }
                    </MudSelect>
                
             

            
            </MudStep>
        <MudStep Title="Namespace" >Create an ad group content</MudStep>
                <MudStep Title="Target">Create an ad content</MudStep>
                <MudStep Title="Additional Config" Skippable="true" SecondaryText="Optional">Create an ad content</MudStep>
    </MudStepper>
    </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </DialogActions>

    </MudDialog>
@code {

    private CreateForwardDto _creeteFwd { get; set; } = new();



    bool success;
    string[] errors = { };
    MudForm form;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() {

        var xxx = _creeteFwd.KubeConfigId;

         MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();



    private List<KonciergeKubeConfigDto> _configs = new();
    private List<string> _contexts = new();
    private KonciergeKubeConfigDto selectedConfig =null;


    private bool _loadingKc = true;
    private string selectedContext { get; set; }

    protected override async Task OnInitializedAsync()
    {

        _loadingKc = true;
        var tmp= _kcRepository.GetAll().ToList();

        _configs = KonciergeDbToDtoProfile.GetAsmapper().Map<List<KonciergeKubeConfigDto>>(tmp);
        _loadingKc = false;



    }


    private async Task KubeConfigChanged(KonciergeKubeConfigDto sel)

    {
        selectedConfig = sel;
        _creeteFwd.KubeConfigId = sel.Id;

        var allCtx = await _ctx.GetAllContexts(sel.Path);

        _contexts = allCtx.Data;

        StateHasChanged();

    }



    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }


    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if (!isClusterStep1Complete())
                {
                    await _dialogs.ShowMessageBox("Error", "You have not flipped the switch in step 1");
                    arg.Cancel = true;
                }
                break;

        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (!isClusterStep1Complete())
                {
                    await _dialogs.ShowMessageBox("Error", "Finish step 1 first");
                    arg.Cancel = true;
                }
                break;

        }
    }


    private bool isClusterStep1Complete() => (_creeteFwd.KubeConfigId != Guid.Empty && _creeteFwd.Namespace is not null);

    
}
