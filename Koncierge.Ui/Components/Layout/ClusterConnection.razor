@using Koncierge.Core
@using Koncierge.Core.K8s.Forwards
@using Koncierge.Core.K8s.Namespaces
@using Koncierge.Core.K8s
@using Koncierge.Domain.DTOs
@using Koncierge.Ui.Components.Layout.Selects

@using Koncierge.Core.K8s.Extensions


@inject IKubernetesClientManager _kubeClients
@inject IKonciergeForwardManager _fwd

@if (!_loading){

    <NameSpaceSelect _kc="_kc" OnNameSpaceSelection="OnNamespaceSelection" />
    <PodSelect @ref="podSelect"  _kc="_kc" _filterNs="_selectedNs" />
    <ServiceSelect @ref="svcSelect"  _kc="_kc" _filterNs="_selectedNs" />


} else { 

    <MudProgressCircular Indeterminate="true" />

}



@code {

    [Parameter]
    public Guid cfgId { get; set; }

    [Parameter]
    public string? context { get; set; }

    private bool _loading { get; set; }

    private KonciergeClient _kc { get; set; }

    private List<string> ns=new();

    private KonciergeNamespaceDto _selectedNs = null;

    private PodSelect podSelect { get; set; }
    private ServiceSelect svcSelect { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;


        _kc = await _kubeClients.GetClient(cfgId, context);

        var secrets = await _kc.GetSecretsAsync(_selectedNs?.Name);
        var maps = await _kc.GetConfigMapsAsync(_selectedNs?.Name);

        _loading = false;


    }

    private async Task OnNamespaceSelection(KonciergeNamespaceDto sel)
    {

        _selectedNs = sel;
        StateHasChanged();
        var refreshPod= podSelect.RefreshView();
        var refreshService = svcSelect.RefreshView();


        var secrets = await _kc.GetSecretsAsync(_selectedNs?.Name);
        var maps = await _kc.GetConfigMapsAsync(_selectedNs?.Name);


        await Task.WhenAll(refreshPod,refreshService);


    }
  

}
