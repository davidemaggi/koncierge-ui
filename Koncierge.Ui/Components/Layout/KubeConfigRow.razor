@using Koncierge.Core.K8s.Namespaces
@using Koncierge.Data.Repositories.Interfaces
@using Koncierge.Domain.Entities


@inject ISnackbar _snakbar
@inject IKubeConfigRepository _kcRepository
@inject IKonciergeKubeConfigService _kcService


<MudTd DataLabel="Path">@_kubeCfg.Path</MudTd>
        <MudTd DataLabel="Name">
            
            @if (!_editingName) { 

            @if (string.IsNullOrEmpty(@_kubeCfg.Name))
            {
                <MudChip T="string" OnClick="@(e => _editingName=true)" Icon="@Icons.Material.Outlined.Edit" IconColor="Color.Primary">Select Name</MudChip>

            } else
            {
                    <MudChip T="string" OnClick="@(e => _editingName=true)" Icon="@Icons.Material.Filled.Edit" IconColor="Color.Primary">@_kubeCfg.Name</MudChip>
                }

            }
            else
            {
                <MudTextField Immediate="true" OnKeyDown="OnKeyDownRename" OnAdornmentClick="RenameConfig"  @bind-Value="_txtName" Label="Name"  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Save" AdornmentColor="Color.Primary" />

            
            }

            
            
        </MudTd>

        <MudTd DataLabel="Default">
            
    @if (isDefault())
    
    {
                       
                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" />


    } else
    {
        
                        <MudIconButton OnClick="SetDefaultConfig" Icon="@Icons.Material.Filled.CheckCircle" Variant="Variant.Outlined" Color="Color.Dark" Size="Size.Small" />
    
    }

            

            
        
        </MudTd>
        <MudTd DataLabel="Contexts">
            <ContextCount _kubeconfigPath="@_kubeCfg.Path" />
        </MudTd>
@code {

    [Parameter]
    public KonciergeKubeConfig _kubeCfg { get; set; }

    [Parameter]
    public EventCallback OnReloadRequested { get; set; }

    private bool _loading = true;
    private bool _editingName = false;
    private string _txtName = "";


    protected override async Task OnInitializedAsync()
    {
        _loading = true;


        _loading = false;

        _txtName = _kubeCfg.Name ?? "";
    }



    private async Task RenameConfig()
    {

        _editingName = false;


        _kubeCfg = await _kcRepository.Rename(_kubeCfg.Id, _txtName);





    }
    private async Task OnKeyDownRename(KeyboardEventArgs e)
    {

        if (e.Code == "Enter" || e.Code == "NumpadEnter")

        {
            await RenameConfig();
        }

    }

    private bool isDefault() => _kcService.IsDefault(_kubeCfg.Path);

    private async Task SetDefaultConfig()

    {

        _kcService.SetDefaultKubeConfigPath(_kubeCfg.Path);

        await OnReloadRequested.InvokeAsync();
    } 

}
