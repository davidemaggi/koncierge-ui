@page "/kubeconfigs"
@using Koncierge.Core.K8s.Namespaces
@using Koncierge.Data.Repositories.Interfaces
@using Koncierge.Domain.Entities
@using Koncierge.Ui.Components.Layout

@inject IKonciergeKubeConfigService _kcService;
@inject IKubeConfigRepository _kcRepository;
@inject ISnackbar _snackBar;

<MudTable Items="@_configs" Hover="true" Filter="new Func<KonciergeKubeConfig, bool>(FilterFunc1)" Loading="@_loading" @bind-SelectedItem="SelectedConfig">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Kube Configs</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Path</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Default</MudTh>
        <MudTh>Contexts</MudTh>

    </HeaderContent>
    <RowTemplate>
        
        <KubeConfigRow OnConnectionToCluster="OnConnectionToCluster" _kubeCfg="context" OnReloadRequested="LoadData" />

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>





@code {
    private List<KonciergeKubeConfig> _configs=new();

    private bool _loading = true;

    private KonciergeKubeConfig SelectedConfig = null;
    private string searchString1 = "";

    [Parameter]
    public EventCallback OnConnectionToCluster { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await LoadData();

    }

    public async Task LoadData()
    
    {
        _loading = true;
        var kcCount = await _kcRepository.Count();
        if (kcCount == 0)
        {

            var tmp = new KonciergeKubeConfig()
            {
                Path = _kcService.GetDefaultKubeConfigPath()
            };
            _snackBar.Add("Adding Default Kubeconfig", Severity.Info);
            await _kcRepository.Create(tmp);

        }

        _configs = _kcRepository.GetAll().ToList();

        _loading = false;
    }


    private bool FilterFunc1(KonciergeKubeConfig element) => FilterFunc(element, searchString1);

    private bool FilterFunc(KonciergeKubeConfig element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Path.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }


   
}
